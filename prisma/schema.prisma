// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}
enum ActionType {
  question
  answer
}

enum VoteType {
  upvote
  downvote
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  name       String
  username   String  @unique
  email      String  @unique
  bio        String?
  image      String?
  location   String?
  portfolio  String?
  reputation Int     @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]
  questions Question[]
   answers   Answer[]
    collections Collection[]
    votes       Vote[] 
    interactions Interaction[]
    
}
enum InteractionAction {
  view
  upvote
  downvote
  bookmark
  post
  edit
  delete
  search
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  user               User     @relation(fields: [userId], references: [id])
  name               String
  image              String?
  password           String?
  provider           String
  providerAccountId  String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Question {
  id        Int   @id @default(autoincrement())
  title     String
  content   String
  views     Int      @default(0)
  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  answers   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   answersList Answer[] 

  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId Int
  
  tags QuestionTag[]
  collections Collection[] 

  @@map("questions")
}

model QuestionTag {
  questionId Int
  tagId      String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([questionId, tagId])
  @@map("question_tags")
}

model Tag {
  id        String        @id @default(cuid())
  name      String        @unique
  questions Int           @default(0)  // Count of questions using this tag
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  questionTags QuestionTag[]  // Renamed for clarity

  @@map("tags")
}

model Answer {
  id         Int   @id @default(autoincrement())
  content    String
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int

  @@map("answers")
}

model Collection {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int

  // Ensure a user can't save the same question twice
  @@unique([authorId, questionId])
  @@map("collections")
}


model Vote {
  id         String     @id @default(cuid())
  actionId   Int    // ID of the question or answer being voted on
  actionType ActionType // Whether voting on question or answer
  voteType   VoteType   // Whether it's an upvote or downvote
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  // Ensure a user can only vote once per item
  @@unique([authorId, actionId, actionType])
  @@map("votes")
}
model Interaction {
  id         String            @id @default(cuid())
  action     InteractionAction // Type of action performed
  actionId   String            // ID of the question or answer interacted with
  actionType ActionType        // Whether interaction is with question or answer
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  // Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@map("interactions")
}